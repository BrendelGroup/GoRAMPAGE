#
# GoRAMPAGE:  a bash script to run the GoRAMPAGE workflow.
#              RAMPAGE reads to insight.
#
# Last update: December 19, 2016.  Volker Brendel.
#

debug=true	# set to true for code development
shopt -s extglob


# Set the install directory (the below assumes that the GoRAMPAGE script
# is in the same directory as the GoRAMPAGE.conf file):
#
installdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
workingdir="$( pwd )"


# Setting up which steps in the workflow to run (Default: all)
#
declare -a steps2run
steps2run=(step1 step2 step3 step4 step5 step6 step7)
startfromstep=""
stopatstep=""
runonlystep=""


# Default option settings:
#
genomedir=""
reference=""
numproc=1
outputdir=./
configfile=$installdir/GoRAMPAGE.conf

GoRAMPAGEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
input="unclear"

function usage() {
  echo "
    Usage: $0 -r <rawreaddir> -b <barcodes> -R <reference> -g <genomedir> [options]

    Examples:
      $0 -r rawreads -b rawreads/barcodes -R genome/rRNA.ref -g genome --runonlystep step1 >& errTEST1

    GoRAMPAGE will determine transcription start regions (TSRs) in a several-steps workflow.
    You can specify partial workflow execution by specifying \"stepX\" [X = 1, 2, ..., 7] as
    argument to --startfromstep, --stopatstep, or --runonlystep.

    Step 1  Demultiplexing barcoded raw reads input
    Step 2  Clipping non-native bases off reads ends
    Step 3  Removal of low quality and other unwanted reads
    Step 4  Read mapping
    Step 5  Filtering of read alignments
    Step 6  .
    Step 7  .

    To see more help, type \"$0 -h\" or \"$0 --help\".
  "

  if [[ $1 != 'short' ]]; then
    echo "
      Options default to the specified values if not set.
      Details:

      1) Mandatory options:
        -r|--rawreadsdir <path>           Directory that contains the raw reads (all files ending in *.fq)
        -b|--barcodes <path>              barcodes file for use by fastq-multx
        -g|--genome <path>                Directory that contains the genome sequence files (all files ending in .*fa)
        -R|--reference <path>             Reference file genome directory for use by tagdust (one file ending in *.ref)                  
      2) GoRAMPAGE-specific options:
        -p|--numproc <#>                  Use <#> processors during execution [Default: 1]; ideally a multipe of the -k argument.
        -o|--outputdir <path>             Put output into directory <path> [Default: ./]
        -c|--configfile <path>            Configuration file [Default: $configfile]
      3) GoRAMPAGE workflow settings; <step> below must be one of (step1, step2, ..., step7)
         --startfromstep <string>	  Starting step; previous steps must have run successfully before.
         --stopatstep <string>            Last step to execute
         --runonlystep <string>           Workflow step to execute; previous steps must have run successfully before.
      4) Else:
        -h|--help                         Show this usage information
    "
  fi
}
if [ -z "$*" ] ; then usage short ; exit 1 ; fi


function readconfigfile {
# Read the specified ($1) GoRAMPAGE configuration file:
if [ ! -e "$1" ] ; then
  echo ""
  echo "Fatal error: GoRAMPAGE config file $1  does not exist.  Please check."
  exit 1
fi

fastqmultxOptions=`grep '^fastqmultxOptions=' "$1" | awk -F"=" '{print $2}'`
fastxtrimmerOptionsR1=`grep '^fastxtrimmerOptionsR1=' "$1" | awk -F"=" '{print $2}'`
fastxtrimmerOptionsR2=`grep '^fastxtrimmerOptionsR2=' "$1" | awk -F"=" '{print $2}'`
tagdustOptions=`grep '^tagdustOptions=' "$1" | awk -F"=" '{print $2}'`
STARgenomeGenerateOptions=`grep '^STARgenomeGenerateOptions=' "$1" | awk -F"=" '{print $2}'`
STARalignReadsOptions=`grep '^STARalignReadsOptions=' "$1" | awk -F"=" '{print $2}'`
bamFilterOptions=`grep '^bamFilterOptions=' "$1" | awk -F"=" '{print $2}'`
}



##### Process command line arguments: #####
#

OPTIONS=`getopt -o c:r:b:R:g:p:o:h --long configfile:,rawreadsdir:,barcodes:,reference:,genome:numproc:,outputdir:,startfromstep:,stopatstep:,runonlystep:,help -n 'GoRAMPAGE error' -- "$@"`
if [ $? != 0 ] ; then echo " " ; echo "Could not parse options (see above) ..." >&2 ; usage short ; exit 1 ; fi

eval set -- "$OPTIONS"

if [[ $debug == 'true' ]] ; then
  echo ""
  echo "OPTIONS string:"
  echo $OPTIONS
  echo ""
fi

while true ; do
  case "$1" in
    -c|--configfile)
      case "$2" in
        -*) echo "Please provide a GoRAMPAGE configfile when using -c"; usage short; exit 1 ;;
         *) configfile=$2 ; shift 2 ;;
      esac ;;

    -r|--rawreadsdir)
      case "$2" in
        -*) echo "Please provide the directory containing reads when using -r"; usage short; exit 1 ;;
         *) rawreadsdir=$2 ; shift 2 ;;
      esac ;;

    -b|--barcodes)
      case "$2" in
        -*) echo "Please provide a file containing barcodes when using -b"; usage short; exit 1 ;;
         *) barcodes=$2 ; shift 2 ;;
      esac ;;

    -R|--reference)
      case "$2" in
        -*) echo "Please provide a reference file for use with tagdust when using -R"; usage short; exit 1 ;;
         *) reference=$2 ; shift 2 ;;
      esac ;;

    -g|--genome)
      case "$2" in
        -*) echo "Please provide a genome directory when using -g"; usage short; exit 1 ;;
         *) genomedir=$2 ; shift 2 ;;
      esac ;;

    -p|--numproc)
      case "$2" in
        -*) echo "Please provide the number of available processors when using -p"; usage short; exit 1 ;;
         *) numproc=$2 ; shift 2 ;;
      esac ;;

    -o|--outputdir)
      case "$2" in
        -*) echo "Please designate an output directory when using -o"; usage short; exit 1 ;;
         *) outputdir=$2 ; shift 2 ;;
      esac ;;

    --startfromstep)
      case "$2" in
        -*) echo "Please designate the GoRAMPAGE workflow step from which to start."; usage short; exit 1 ;;
         *) startfromstep=$2 ; shift 2 ;;
      esac ;;

    --stopatstep)
      case "$2" in
        -*) echo "Please designate the last GoRAMPAGE workflow step to execute."; usage short; exit 1 ;;
         *) stopatstep=$2 ; shift 2 ;;
      esac ;;

    --runonlystep)
      case "$2" in
        -*) echo "Please designate the GoRAMPAGE workflow step to execute."; usage short; exit 1 ;;
         *) runonlystep=$2 ; shift 2 ;;
      esac ;;

    -h|--help)
      usage long; exit 1 ;;

    --) shift ; break ;;

     *) echo "Unknown error." ; usage short; exit 1 ;;
  esac
done



if [[ $debug == 'true' ]] ; then
  echo "Variable values:"
  echo ""
  echo "rawreadsdir	=	$rawreadsdir"
  echo "barcodes	=	$barcodes"
  echo "genomedir	=	$genomedir"
  echo "reference	=	$reference"
  echo "numproc		=	$numproc"
  echo "outputdir	=	$outputdir"
  echo "startfromstep	=	$startfromstep"
  echo "stopatstep	=	$stopatstep"
  echo "runonlystep	=	$runonlystep"
  echo "configfile	=	$configfile"
fi

readconfigfile $configfile

if [[ $startfromstep != '' ]] ; then
  i=-1
  for step in ${steps2run[@]} ; do
    ((++i))
    if [[ $step != $startfromstep ]] ; then unset steps2run[$i] ; else break ; fi
  done
fi

unsetflag=0
if [[ $stopatstep != '' ]] ; then
  for step in ${steps2run[@]} ; do
    ((++i))
    if [[ $step == $stopatstep ]] ; then unsetflag=1 ; ((--i))
    else  if [[ $unsetflag == 1 ]] ; then unset steps2run[$i] ; fi ;  fi
  done
fi

if [[ $runonlystep != '' ]] ; then
  steps2run=($runonlystep)
fi

if [[ $debug == 'true' ]] ; then
  echo ""
  echo "Additional arguments:"
  echo ""
  for arg; do echo $arg; done
  echo ""
fi

if [[ $debug == 'true' ]] ; then echo "steps2run: ${steps2run[*]}" ; fi


#########################################
#Step 0			                #
#Setting up				#
#########################################

outputdir=`readlink -f ${outputdir}`
rawreadsdir=`readlink -f ${rawreadsdir}`
genomedir=`readlink -f ${genomedir}`
reference=`readlink -f ${reference}`
barcodes=`readlink -f ${barcodes}`

echo $outputdir
echo $rawreadsdir
echo $genomedir
echo $reference
echo $barcodes

if [ ! -d "$outputdir" ] ; then
  echo ""
  echo "Fatal error: Output directory $outputdir does not exist.  Please check."
  exit 1
fi
if [ ! -d "$rawreadsdir" ] ; then
  echo ""
  echo "Fatal error: Raw reads directory $rawreadsdir does not exist.  Please check."
  exit 1
fi
if [ ! -d "$genomedir" ] ; then
  echo ""
  echo "Fatal error: Genome directory $genomedir does not exist.  Please check."
  exit 1
fi
if [ ! -e "${barcodes}" ] ; then
  echo ""
  echo "Fatal error: fastq-multx specified reference ${barcodes} not found.  Please check."
  exit 1
fi 
if [ ! -e "${reference}" ] ; then
  echo ""
  echo "Fatal error: tagdust specified reference ${reference} not found.  Please check."
  exit 1
fi 


runstep0=1	# Step 0 will always be run (unless we change the code otherwise at some point)
runstep1=0
runstep2=0
runstep3=0
runstep4=0
runstep5=0
runstep6=0
runstep7=0
for step in ${steps2run[@]} ; do
  if [[ $step == "step1" ]] ; then runstep1=1 ; fi
  if [[ $step == "step2" ]] ; then runstep2=1 ; fi
  if [[ $step == "step3" ]] ; then runstep3=1 ; fi
  if [[ $step == "step4" ]] ; then runstep4=1 ; fi
  if [[ $step == "step5" ]] ; then runstep5=1 ; fi
  if [[ $step == "step6" ]] ; then runstep6=1 ; fi
  if [[ $step == "step7" ]] ; then runstep7=1 ; fi
done

if [ $runstep0 == 1 ] ; then
  echo ""
  echo "GoRAMPAGE: Now running step 0 ..."
  if [ ! -d "${outputdir}" ] ; then
    mkdir ${outputdir}
  fi
  if [ $runstep1 == 1 ] ; then
    echo "GoRAMPAGE: you will run step 1"
  fi
  if [ $runstep2 == 1 ] ; then
    echo "GoRAMPAGE: you will run step 2"
  fi
  if [ $runstep3 == 1 ] ; then
    echo "GoRAMPAGE: you will run step 3"
  fi
  if [ $runstep4 == 1 ] ; then
    echo "GoRAMPAGE: you will run step 4"
  fi
  if [ $runstep5 == 1 ] ; then
    echo "GoRAMPAGE: you will run step 5"
  fi
  if [ $runstep6 == 1 ] ; then
    echo "GoRAMPAGE: you will run step 6"
  fi
  if [ $runstep7 == 1 ] ; then
    echo "GoRAMPAGE: you will run step 7"
  fi

  echo ""
  echo "================================================================================"
fi


#################################
#Step 1			        #
#Demultiplexing raw reads input #
#################################

if [ $runstep1 == 1 ] ; then
  echo "GoRAMPAGE: Now running step 1 (demultiplexing raw reads) ..."
  echo ""

  barcodes=$(readlink -f ${barcodes})
  cd ${rawreadsdir}

  if [ ! -d ${outputdir}/reads/demultiplexed_matched ] ; then
    mkdir -p ${outputdir}/reads/demultiplexed_matched
  fi
  if [ ! -d ${outputdir}/reads/demultiplexed_unmatched ] ; then
    mkdir -p ${outputdir}/reads/demultiplexed_unmatched
  fi
  if [ ! -d ${outputdir}/reads/LOGFILES ] ; then
    mkdir -p ${outputdir}/reads/LOGFILES
  fi

  for file in `ls *R1.fq | cut -d "." -f1`; do
    echo "fastq-multx -B $barcodes  $fastqmultxOptions  ${file}.R1.fq ${file}.R2.fq -o ${file}_%.R1.fq ${file}_%.R2.fq"
#   sem -j $numproc "fastq-multx -B $barcodes  $fastqmultxOptions  ${file}.R1.fq ${file}.R2.fq -o ${file}_%.R1.fq ${file}_%.R2.fq >& demultiplexing-${file}.log; echo done with fastq-multx for ${file} ...";
    sem -j $numproc "fastq-multx -B $barcodes  $fastqmultxOptions  ${file}.R1.fq ${file}.R2.fq -o ${file}_dm_%.R1.fq ${file}_dm_%.R2.fq >& demultiplexing-${file}.log; echo done with fastq-multx for ${file} ...";
  done
  sem --wait

  mv demultiplexing-*.log ${outputdir}/reads/LOGFILES
  mv *_unmatched.R?.fq ${outputdir}/reads/demultiplexed_unmatched
# mv *_*.R?.fq ${outputdir}/reads/demultiplexed_matched
  mv *_dm_*.R?.fq ${outputdir}/reads/demultiplexed_matched

  cd ${workingdir}
  echo ""
  echo "GoRAMPAGE: Done with step 1 (demultiplexing raw reads)."
  echo "       Output from this step is in directories"
  echo "       ${outputdir}/reads/demultiplexed_matched and"
  echo "       ${outputdir}/reads/demultiplexed_unmatched."
  echo "       fastq-multx messages are saved in the ${outputdir}/reads/LOGFILES directory."
  echo ""
  echo "================================================================================"
fi


##########################################
#Step 2				         #
#Clipping non-native bases off read ends #
##########################################

if [ $runstep2 == 1 ] ; then
  echo "GoRAMPAGE: Now running step 2 (read clipping) ..."
  echo ""
  cd ${workingdir}

  cd ${outputdir}/reads/demultiplexed_matched
  for file in *.R1.fq ; do
    echo "fastx_trimmer  $fastxtrimmerOptionsR1  -i ${file} -o $(basename $file .fq).clipped.fq"
    sem -j $numproc "fastx_trimmer  $fastxtrimmerOptionsR1  -i ${file} -o $(basename $file .fq).clipped.fq; echo  done with fastx_trimmer for ${file} ...;"
  done
  sem --wait
  for file in *.R2.fq ; do
    echo "fastx_trimmer  $fastxtrimmerOptionsR2 -i ${file} -o $(basename ${file} .fq).clipped.fq"
    sem -j $numproc "fastx_trimmer  $fastxtrimmerOptionsR2  -i ${file} -o $(basename ${file} .fq).clipped.fq; echo  done with fastx_trimmer for ${file} ...;"
  done
  sem --wait

  cd ${outputdir}/reads
  if [ ! -d "clipped" ] ; then
    mkdir clipped
  fi

  for file in demultiplexed_matched/*.clipped.fq ; do
    mv $file clipped
  done
  cd ..

  echo ""
  echo "GoRAMPAGE: Done with step 2 (read clipping)."
  echo "       Output from this step is in directory ${outputdir}/reads/clipped."
  echo ""
  echo "================================================================================"
fi


##################################################
#Step 3				 i               #
#Removal of low quality and other unwanted reads #
##################################################

if [ $runstep3 == 1 ] ; then
  echo "GoRAMPAGE: Now running step 3 (read dusting) ..."
  echo ""
  cd ${workingdir}

  reference=`readlink -f ${reference}`
  if [ ! -e "${reference}" ] ; then
    echo ""
    echo "Fatal error: tagdust specified reference ${reference} not found.  Please check."
    exit
  fi

  cd ${outputdir}/reads/clipped
  for file1 in *.R1.clipped.fq ; do
    file2=${file1/.R1./.R2.}
    echo "tagdust -ref $reference -t $numproc ${tagdustOptions} ${file1} ${file2} -o $(basename $file1 .R1.clipped.fq).dusted"
    tagdust -ref $reference -t $numproc ${tagdustOptions} ${file1} ${file2} -o $(basename $file1 .R1.clipped.fq).dusted
  done

  cd ${outputdir}/reads
  if [ ! -d "dusted_discard" ] ; then
    mkdir dusted_discard
  fi

  for file in clipped/*.dusted_logfile.txt ; do
    mv $file LOGFILES
  done
  for file in clipped/*.dusted_un_READ?.fq ; do
    mv $file dusted_discard
  done
  for file in clipped/*.dusted_READ?.fq ; do
    mv $file ./${file/dusted_}
  done
  for file in clipped/*.READ?.fq ; do
    mv $file ./
  done
  cd ..

  echo ""
  echo "GoRAMPAGE: Done with step 3 (read dusting)."
  echo "       Output from this step is in directory ${outputdir}/reads/*READ?.fq."
  echo "       Discarded reads are saved in directory ${outputdir}/reads/dusted_discard."
  echo "       tagdust messages are saved in the ${outputdir}/reads/LOGFILES directory."
  echo ""
  echo "================================================================================"
fi


##########################################
#Step 4				         #
#Read mapping                            #
##########################################

if [ $runstep4 == 1 ] ; then
  echo "GoRAMPAGE: Now running step 4 (read mapping) ..."
  echo ""
  cd ${workingdir}

  if [ ! -e ${genomedir}/SAindex ] ; then
    echo "STAR --runMode genomeGenerate --runThreadN $numproc  ${STARgenomeGenerateOptions}  --genomeDir $genomedir --genomeFastaFiles $genomedir/*.fa"
    STAR --runMode genomeGenerate --runThreadN $numproc  ${STARgenomeGenerateOptions}  --genomeDir $genomedir --genomeFastaFiles $genomedir/*.fa
  else
    echo "Using existing STAR suffix array for genome file $genomedir/*.fa"
  fi

  cd ${outputdir}/reads
  for file1 in *.READ1.fq ; do
    file2=${file1/.READ1./.READ2.}
    echo "STAR --runMode alignReads --runThreadN $numproc  ${STARalignReadsOptions}  --outSAMtype BAM SortedByCoordinate --outSAMorder Paired  --outFileNamePrefix $(basename $file1 .READ1.fq).STAR.  --genomeDir $genomedir  --readFilesIn ${file1} ${file2}"
    STAR --runMode alignReads --runThreadN $numproc  ${STARalignReadsOptions}  --outSAMtype BAM SortedByCoordinate --outSAMorder Paired  --outFileNamePrefix $(basename $file1 .READ1.fq).STAR.  --genomeDir $genomedir  --readFilesIn ${file1} ${file2}
  done

  cd ${outputdir}
  if [ ! -d "STARoutput" ] ; then
    mkdir STARoutput
  fi

  for file in reads/*.STAR.* ; do
    mv $file STARoutput
  done

  if [ -e ${workingdir}/Log.out ] ; then
    mv ${workingdir}/Log.out STARoutput/STARlogfile
  fi

  if [ ! -d "alignments" ] ; then
    mkdir alignments
  fi
  cd alignments
  for file1 in ../STARoutput/*.STAR.*.bam ; do
    echo $file1
    file2=$(basename $file1)
    ln -s $file1 ./${file2/.STAR.Aligned.sortedByCoord.out}
  done
  cd ..

  echo ""
  echo "GoRAMPAGE: Done with step 4 (read mapping)."
  echo "       Output from this step is in directory ${outputdir}/STARoutput."
  echo "       Read alignments are accessible for inspection and further processing"
  echo "       in ${outputdir}/alignments."
  echo ""
  echo "================================================================================"
fi

##########################################
#Step 5				         #
#Filtering of read alignments            #
##########################################

if [ $runstep5 == 1 ] ; then
  echo "GoRAMPAGE: Now running step 5 (Filtering of read alignments) ..."
  echo ""
  cd ${workingdir}

  if [ ! -d "bam_filtered" ] ; then
    mkdir bam_filtered
  fi
  cd ${outputdir}/alignments
  for file1 in *.bam ; do
    echo ""
    echo "samtools view -b $bamFilterOptions -o ${outputdir}/$(basename $file1 .bam).filtered.bam $file1"
    echo ""
    samtools view -b $bamFilterOptions -o ${outputdir}/bam_filtered/$(basename $file1 .bam).filtered.bam $file1
  done

  echo ""
  echo "GoRAMPAGE: Done with step 5 (Filtering of read alignments)."
  echo "       Output from this step is in directory ${outputdir}/bam_filtered."
  echo ""
  echo "================================================================================"
fi

exit
